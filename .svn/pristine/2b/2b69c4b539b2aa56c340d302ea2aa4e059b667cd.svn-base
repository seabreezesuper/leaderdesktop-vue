<!-- 组件说明 -->
<template>
  <div class="main">
    <tr>
      <video id="video" height="324" autoplay></video>
      <canvas id="canvas" width="576" height="324"></canvas>
    </tr>
    <tr>
      <button id="rec" @click="onBtnRecordClicked">Record</button>
      <button id="rec" @click="onBtnSnapshotClicked">Snapshot</button>
      <button id="stop" @click="onBtnStopClicked" disabled>Stop</button>
    </tr>
  </div>
</template>

<script>
//import x from ''
export default {
  components: {},
  data() {
    return {
      mediaStreamTrack: "",
    };
  },
  computed: {},
  methods: {
    onBtnRecordClicked() {
      var _this = this;
      var recBtn = document.querySelector("button#rec");
      var stopBtn = document.querySelector("button#stop");
      var video = document.getElementById("video");

      // Get access to the camera!
      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        // Not adding `{ audio: true }` since we only want video now
        navigator.mediaDevices
          .getUserMedia({ video: true })
          .then(function(stream) {
            //video.src = window.URL.createObjectURL(stream);
            _this.mediaStreamTrack =
              typeof stream.stop === "function"
                ? stream
                : stream.getTracks()[1];
            video.srcObject = stream;
            _this.video = video;
            video.play();

            recBtn.disabled = true;
            stopBtn.disabled = false;
          });
      }
    },
    onBtnStopClicked() {
      var recBtn = document.querySelector("button#rec");
      var stopBtn = document.querySelector("button#stop");

      // mediaRecorder.stop();
      this.mediaStreamTrack.stop();
      // _this.video.stop();

      recBtn.disabled = false;
      stopBtn.disabled = true;
    },
    onBtnSnapshotClicked() {
      var video = document.getElementById("video");
      var canvas = document.getElementById("canvas");
      var context = canvas.getContext("2d");
      context.drawImage(video, 0, 0, 576, 324);

      var param = new FormData();
      var src = canvas.toDataURL("image/png"); //这里转成的是base64的地址，直接用到img标签的src是可以显示图片的
      var blob = this.dataURItoBlob(src);
      param.append(
        "file",
        blob,
        "--image" + new Date().getTime() + "client_signature.png"
      );

    // axios提交数据
      this.axios({
        method: "post",
        url: "/snapshot",
        data: param
      })
        .then(res => {
          alert(res.data);
        })
        .catch(err => {
           console.log(err);
        });
    },
    dataURItoBlob(dataURI) {
      var byteString = atob(dataURI.split(",")[1]);
      var mimeString = dataURI
        .split(",")[0]
        .split(":")[1]
        .split(";")[0];

      var ab = new ArrayBuffer(byteString.length);
      var ia = new Uint8Array(ab);

      for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
      }

      return new Blob([ab], { type: mimeString });
    },
  },
  mounted() {},
  beforeCreate() {}, //生命周期 - 创建之前
  beforeMount() {}, //生命周期 - 挂载之前
  beforeUpdate() {}, //生命周期 - 更新之前
  updated() {}, //生命周期 - 更新之后
  beforeDestroy() {}, //生命周期 - 销毁之前
  destroyed() {}, //生命周期 - 销毁完成
  activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发
};
</script>

<style>
.main {
  text-align: center;
}
</style>
